// Generated by gencpp from file open_quadruped/joint_angles.msg
// DO NOT EDIT!


#ifndef OPEN_QUADRUPED_MESSAGE_JOINT_ANGLES_H
#define OPEN_QUADRUPED_MESSAGE_JOINT_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_quadruped
{
template <class ContainerAllocator>
struct joint_angles_
{
  typedef joint_angles_<ContainerAllocator> Type;

  joint_angles_()
    : fl()
    , fr()
    , bl()
    , br()  {
    }
  joint_angles_(const ContainerAllocator& _alloc)
    : fl(_alloc)
    , fr(_alloc)
    , bl(_alloc)
    , br(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fl_type;
  _fl_type fl;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fr_type;
  _fr_type fr;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _bl_type;
  _bl_type bl;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _br_type;
  _br_type br;





  typedef boost::shared_ptr< ::open_quadruped::joint_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_quadruped::joint_angles_<ContainerAllocator> const> ConstPtr;

}; // struct joint_angles_

typedef ::open_quadruped::joint_angles_<std::allocator<void> > joint_angles;

typedef boost::shared_ptr< ::open_quadruped::joint_angles > joint_anglesPtr;
typedef boost::shared_ptr< ::open_quadruped::joint_angles const> joint_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_quadruped::joint_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_quadruped::joint_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_quadruped::joint_angles_<ContainerAllocator1> & lhs, const ::open_quadruped::joint_angles_<ContainerAllocator2> & rhs)
{
  return lhs.fl == rhs.fl &&
    lhs.fr == rhs.fr &&
    lhs.bl == rhs.bl &&
    lhs.br == rhs.br;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_quadruped::joint_angles_<ContainerAllocator1> & lhs, const ::open_quadruped::joint_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_quadruped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::open_quadruped::joint_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_quadruped::joint_angles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_quadruped::joint_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_quadruped::joint_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_quadruped::joint_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_quadruped::joint_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_quadruped::joint_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc955e0566b06523084e350c65b2944e";
  }

  static const char* value(const ::open_quadruped::joint_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc955e0566b06523ULL;
  static const uint64_t static_value2 = 0x084e350c65b2944eULL;
};

template<class ContainerAllocator>
struct DataType< ::open_quadruped::joint_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_quadruped/joint_angles";
  }

  static const char* value(const ::open_quadruped::joint_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_quadruped::joint_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] fl\n"
"float32[] fr\n"
"float32[] bl\n"
"float32[] br\n"
;
  }

  static const char* value(const ::open_quadruped::joint_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_quadruped::joint_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fl);
      stream.next(m.fr);
      stream.next(m.bl);
      stream.next(m.br);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_quadruped::joint_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_quadruped::joint_angles_<ContainerAllocator>& v)
  {
    s << indent << "fl[]" << std::endl;
    for (size_t i = 0; i < v.fl.size(); ++i)
    {
      s << indent << "  fl[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fl[i]);
    }
    s << indent << "fr[]" << std::endl;
    for (size_t i = 0; i < v.fr.size(); ++i)
    {
      s << indent << "  fr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fr[i]);
    }
    s << indent << "bl[]" << std::endl;
    for (size_t i = 0; i < v.bl.size(); ++i)
    {
      s << indent << "  bl[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bl[i]);
    }
    s << indent << "br[]" << std::endl;
    for (size_t i = 0; i < v.br.size(); ++i)
    {
      s << indent << "  br[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.br[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_QUADRUPED_MESSAGE_JOINT_ANGLES_H
